Dark background
bg={colorMode === "light" ? "brand.300" : "brand.800"}

Light background ===> yellow
bg={colorMode === "light" ? "brand.500" : "dark"}

const { colorMode } = useColorMode();

color={colorMode === "light" ? "brand.400" : "brand.450"}

Heading
color={colorMode === "light" ? "brand.850" : "brand.300"}

Text
color={colorMode === "light" ? "brand.900" : "brand.350"}

"#777a80"

 { value: "education", label: "Education" },
  { value: "culture", label: "Culture" },
  { value: "art", label: "Art" },
  { value: "books", label: "Books" },
  { value: "fashion", label: "Fashion" },
  { value: "beauty", label: "Beauty" },
  { value: "film", label: "Film" },
  { value: "music", label: "Music" },
  { value: "gaming", label: "Gaming" },
  { value: "design", label: "Design" },
  { value: "photography", label: "Photography" },
  { value: "writing", label: "Writing" },
  { value: "marketing", label: "Marketing" },
  { value: "social-media", label: "Social Media" },
  { value: "productivity", label: "Productivity" },
  { value: "programming", label: "Programming" },
  { value: "javascript", label: "JavaScript" },
  { value: "python", label: "Python" },
  { value: "react", label: "React" },
  { value: "angular", label: "Angular" },
  { value: "vue", label: "Vue" },
  { value: "nodejs", label: "Node.js" },
  { value: "graphql", label: "GraphQL" },
  { value: "typescript", label: "TypeScript" },
  { value: "nextjs", label: "Next.js" },
  { value: "gatsby", label: "Gatsby" },
  { value: "flutter", label: "Flutter" },
  { value: "android", label: "Android" },


  import { useToast } from "@chakra-ui/react";
import {
  createUserWithEmailAndPassword,
  signInWithEmailAndPassword,
} from "firebase/auth";
import { useEffect, useState } from "react";
import { auth, db } from "../lib/firebase";
import { useRouter } from "next/navigation";
import { setDoc, doc, getDoc, DocumentData } from "firebase/firestore";
import isUsernameExists from "../utils/isUsernameExists";
import { useAuthState, useSignOut } from "react-firebase-hooks/auth";

export function useAuth() {
  const [authUser, authLoading, error] = useAuthState(auth);
  const [isLoading, setLoading] = useState(true);
  const [user, setUser] = useState<DocumentData | null>(null);
  const [Testuser, loading, eerror] = useAuthState(auth);

  // console.log("TestData", Testuser);
  // console.log("UseAuth now", user);

  useEffect(() => {
    async function fetchData() {
      setLoading(true);
      if (authUser) {
        const ref = doc(db, "users", authUser.uid);
        const docSnap = await getDoc(ref);
        setUser(docSnap.data() as DocumentData);
      }
      setLoading(false);
    }

    if (!authLoading) {
      if (authUser) fetchData();
      else setLoading(false); // Not signed in
    }
  }, [authLoading, authUser]);

  return { user, isLoading, error };
}

interface SignUpProps {
  username: string;
  email: string;
  password: string;
  firstName: string;
  lastName: string;
  joiningAs: string;
  redirectTo: string;
}
interface SignInProps {
  email: string;
  password: string;
  redirectTo: string;
}

export function useLogin() {
  const [isLoading, setLoading] = useState(false);
  const toast = useToast();
  const router = useRouter();

  async function login({
    email,
    password,
    redirectTo = "/pages/dashboard",
  }: SignInProps) {
    setLoading(true);

    try {
      await signInWithEmailAndPassword(auth, email, password);
      toast({
        title: "Login successful",
        status: "success",
        isClosable: true,
        position: "top-right",
        duration: 5000,
      });
      router.push(redirectTo);
    } catch (error: any) {
      toast({
        title: "Logging in failed",
        description: "Wrong email or password",
        status: "error",
        isClosable: true,
        position: "top-right",
        duration: 5000,
      });
      setLoading(false);
      return false; // Return false if login failed
    }
    setLoading(false);

    return true; // Return true if login succeeded
  }

  return { login, isLoading };
}

export function useRegister() {
  const [isLoading, setLoading] = useState(false);
  const toast = useToast();
  const router = useRouter();

  async function register({
    firstName,
    lastName,
    joiningAs,
    username,
    email,
    password,
    redirectTo = "/pages/dashboard",
  }: SignUpProps) {
    setLoading(true);

    const usernameExists = await isUsernameExists(username);

    if (usernameExists) {
      toast({
        title: "Username already exists",
        status: "error",
        isClosable: true,
        position: "top-right",
        duration: 5000,
      });
      setLoading(false);
    } else {
      try {
        await createUserWithEmailAndPassword(auth, email, password);

        await setDoc(doc(db, "users", email?.toLowerCase()), {
          // id: res.user.uid,
          id: email?.toLowerCase(),
          username: username?.toLowerCase(),
          firstName,
          lastName,
          email,
          joiningAs,
          avatar: "",
          date: Date.now(),
        });

        toast({
          title: "Account created successfully",
          description: "We've created your account for you.",
          status: "success",
          isClosable: true,
          position: "top-right",
          duration: 5000,
        });

        router.push(redirectTo);
      } catch (error: any) {
        toast({
          title: "Signing Up failed",
          description: error.message,
          status: "error",
          isClosable: true,
          position: "top-right",
          duration: 5000,
        });
      } finally {
        setLoading(false);
      }
    }
  }

  return { register, isLoading };
}

export function useLogout() {
  const [signOut, isLoading, error] = useSignOut(auth);
  const toast = useToast();
  const router = useRouter();

  async function logout() {
    if (await signOut()) {
      toast({
        title: "Successfully logged out",
        status: "success",
        isClosable: true,
        position: "top-right",
        duration: 5000,
      });
      router.push("/");
    } // else: show error [signOut() returns false if failed]
  }

  return { logout, isLoading };
}



import { Box, Button, Heading, Text } from "@chakra-ui/react";
import ReactMarkdown from "react-markdown";
import MarkdownEditor from "react-markdown-editor-lite";
import "react-markdown-editor-lite/lib/index.css";
import { useContext, useState } from "react";
import { PostProps, useAddPost } from "../hooks/post";
import { useAuth } from "../hooks/auth";

const PostPreview = ({ content }: { content: string }) => {
  return <ReactMarkdown>{content}</ReactMarkdown>;
};

const PostEditor = ({
  initialContent,
  onChange,
}: {
  initialContent: string;
  onChange: (newContent: string) => void;
}) => {
  return (
    <MarkdownEditor
      value={initialContent}
      renderHTML={(text) => <ReactMarkdown>{text}</ReactMarkdown>}
      onChange={({ text }) => onChange(text)}
    />
  );
};

const PostPage = () => {
  const [content, setContent] = useState("");
  const { addPost, isLoading: publishingPost } = useAddPost();
  const { entry, setEntry } = useContext(ChatterContext);
  // const { colorMode } = useColorMode();
  // const mdParser = new MarkdownIt();
  // const toast = useToast();
  // const [publishLoading, setPublishLoading] = useState(false);
  // const [draftLoading, setDraftLoading] = useState(false);
  // const { isOpen, onOpen, onClose } = useDisclosure();
  // const router = useRouter();
  // const { addPost, isLoading: publishingPost } = useAddPost();
  const { user, isLoading: authLoading } = useAuth();

  const handleEditorChange = (newContent: string) => {
    setContent(newContent);
  };

  async function handlePublish(
    content: string,
    event: React.MouseEvent<HTMLButtonElement>
  ) {
    event.preventDefault();
    addPost({
      // uid: user?.id,
      // title: entry.title,
      // bannerImg: entry.bannerImg,
      body: content,
      // category: entry.category,
      // postLength: entry.postLength,
      // postedOn: Date.now(),
      // intro: entry.intro,
    });
  }

  console.log(content);

  return (
    <Box p={4}>
      <Heading>Edit Post</Heading>
      <PostEditor initialContent={content} onChange={handleEditorChange} />
      <Heading size="md" mt={4}>
        Preview
      </Heading>
      <Box border="1px" borderColor="gray.200" p={4}>
        <PostPreview content={content} />
      </Box>
      <Button
        type="submit"
        bg="#543EE0"
        _hover={{ bg: "#715fe3" }}
        color={"white"}
        onClick={(event) => handlePublish(content, event)}
        isLoading={publishingPost}
      >
        Publish
      </Button>
    </Box>
  );
};

export default PostPage;


{isLoading ? (
          "loading..."
        ) : (
          <>
            {!user ? (
              <Stack
                flex={{ base: 1, md: 0 }}
                justify={"flex-end"}
                direction={"row"}
                spacing={6}
              >
                <Button
                  as={NextLink}
                  fontSize={"sm"}
                  fontWeight={600}
                  variant={"link"}
                  href={"/pages/signin"}
                  px={"15px"}
                  py={"7px"}
                  color={"brand.600"}
                  border={"1px solid"}
                  borderColor={"brand.600"}
                  _hover={{
                    bg: "brand.700",
                    color: "white",
                  }}
                >
                  Sign In
                </Button>
                <Button
                  as={NextLink}
                  display={{ base: "none", md: "inline-flex" }}
                  fontSize={"sm"}
                  fontWeight={600}
                  color={"white"}
                  bg={"brand.600"}
                  href={"/pages/signup"}
                  _hover={{
                    bg: "brand.700",
                  }}
                >
                  Sign Up
                </Button>
              </Stack>
            ) : (
              <NavMenu />
            )}
          </>
        )}


        rel="preload" as="script"

        //Example 1: Preload a script
        <link rel="preload" href="/public/home.js" as="script">

               // _hover={{ textDecoration: "none" }}

                <Text>
        You must&nbsp;
        <Link
          rel="preload"
          as="script"
          href="/pages/signin"
          style={{ display: "inline", fontWeight: "bold", color: "brand.600" }}
        >
          Signin
        </Link>
        &nbsp;to comment
      </Text>